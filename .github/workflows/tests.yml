name: Tests

# 触发条件
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行（UTC时间）
    - cron: '0 2 * * *'

# 环境变量
env:
  PYTHONPATH: .
  FLASK_ENV: testing

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12, 3.13]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        # 停止构建如果有Python语法错误或未定义的名称
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 将其他问题作为警告处理
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run unit tests
      run: python -m pytest tests/ -m "unit" -v --tb=short
    
    - name: Run integration tests
      run: |
        # 启动API服务器（后台运行）
        python app.py &
        sleep 10  # 等待服务器启动
        
        # 运行集成测试
        python -m pytest tests/ -m "integration" -v --tb=short
        
        # 停止API服务器
        pkill -f "python app.py" || true
    
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          reports/
          coverage.xml
    
    - name: Generate test summary
      if: always()
      run: |
        echo "## 测试结果摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Python版本: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- 测试状态: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f coverage.xml ]; then
          echo "### 代码覆盖率" >> $GITHUB_STEP_SUMMARY
          python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = root.attrib.get('line-rate', '0')
            coverage_percent = float(coverage) * 100
            print(f'- 覆盖率: {coverage_percent:.1f}%')
        except:
            print('- 覆盖率: 无法获取')
        " >> $GITHUB_STEP_SUMMARY
        fi

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run performance tests
      run: |
        # 启动API服务器
        python app.py &
        sleep 10
        
        # 运行性能测试
        python -m pytest tests/ -m "performance" -v --tb=short
        
        # 停止API服务器
        pkill -f "python app.py" || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: reports/

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-status:
    runs-on: ubuntu-latest
    needs: [test, performance-test, security-scan]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        echo "构建状态检查:"
        echo "- 测试: ${{ needs.test.result }}"
        echo "- 性能测试: ${{ needs.performance-test.result }}"
        echo "- 安全扫描: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "❌ 测试失败"
          exit 1
        elif [[ "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ 所有检查通过"
        fi